# Product Requirements Document (PRD): Lumea Coaching Platform

## 1. Introduction & Vision

**Product:** Lumea  
**Vision:** To provide a secure, dedicated, calm, and supportive Progressive Web App (PWA) for the Satya Method coaching practice. Lumea aims to move beyond generic tools, offering a unified and specialized digital environment that fosters a serene, safe, and reflective space for both coaches and their clients.  
**Core Goal:** Build a 1-on-1 personal development coaching platform that is mobile-first, bilingual (Hebrew/RTL primary), and meets high standards of UI/UX and accessibility (WCAG 2.1 AA).

## 2. User Roles & Personas

* **Client:** An individual receiving coaching. They need to reflect on sessions, track their journey, and access resources provided by their coach.
* **Coach:** A certified Satya Method coach. They need to manage their clients, schedule sessions, keep private notes, share resources, and monitor client progress and payments.
* **Platform Admin:** An administrator responsible for maintaining the platform's integrity. They onboard/approve new coaches and oversee platform-level metrics.

## 3. Key Feature Areas (Epics)

1. User Onboarding & Management
2. Session & Scheduling Management
3. Reflections Journal
4. Coach's Private Notes
5. Resource Center
6. Client Progress Tracking
7. Admin Dashboard & Coach Approval
8. Technical Excellence & Debt Reduction

## 4. Feature Details

### Epic 1: User Onboarding & Management
- User Registration (Client, Coach)
- User Login with secure credentials
- Password Reset functionality
- Profile Management
- Coach-Client Association

### Epic 2: Session & Scheduling Management
- Schedule Session functionality
- Session Calendar/List View
- Session Reminders
- Reschedule/Cancel Session
- Manual Payment Tracking

### Epic 3: Reflections Journal
- Text Reflection submission
- Audio Reflection capability
- View Reflections history
- Reflection Notifications

### Epic 4: Coach's Private Notes
- Create Private Notes
- View/Edit Private Notes with encryption

### Epic 5: Resource Center
- Upload Resource functionality
- Assign Resources to clients
- View Assigned Resources

### Epic 6: Client Progress Tracking
- Progress Timeline View
- Define/Track Milestones

### Epic 7: Admin Dashboard & Coach Approval
- Coach Approval Queue
- Approve/Reject Coach functionality
- Platform Metrics Dashboard

### Epic 8: Technical Excellence
- TypeScript Strict Mode implementation
- Database Migration Strategy
- Enhanced Test Coverage
- Native Wrapper completion

## 5. Non-Functional Requirements

- Security standards compliance
- High performance benchmarks
- WCAG 2.1 AA accessibility
- Bilingual support (Hebrew/English)
- Robust error handling

## 6. Project Overview
The SatyaCoaching platform is a comprehensive 1-on-1 personal development coaching platform with 10/11 epics complete (100% core functionality). The platform currently faces critical backend connection issues preventing access to live data, requiring immediate recovery and systematic upgrade to replace mock data with live Supabase integration.

## 7. Current Critical Issues
- **EMERGENCY**: Backend server completely disconnected, all API endpoints failing with ECONNREFUSED
- **Mock Data Dependency**: Multiple components still using mock data instead of live Supabase queries
- **Bilingual Experience**: Partially complete bilingual enhancement needs finalization

## 8. Project Goals
1. **Emergency Backend Recovery**: Restore full backend connectivity and API functionality
2. **Mock Data Elimination**: Replace all remaining mock data with live Supabase integration
3. **Bilingual Experience Polish**: Complete the bilingual enhancement for production readiness
4. **Real-Time Features Enhancement**: Optimize real-time capabilities for better user experience

## 9. Technical Requirements

### Phase 1: Emergency Backend Recovery (CRITICAL)
- Diagnose and fix backend server connection issues
- Verify Vite proxy configuration and port settings
- Validate environment variables and Supabase connectivity
- Test all API endpoints for proper functionality
- Ensure Redis and queue services are operational

### Phase 2: Mock Data → Live Data Migration
- **Dashboard Integration**: Replace mock statistics with live Supabase queries
- **Session Management**: Connect session endpoints to real data with CRUD operations
- **Reflection System**: Implement live reflection data with real-time updates
- **Notification System**: Connect notification endpoints to live delivery system
- **Analytics Dashboards**: Replace all mock analytics with live data visualization
- **Payment System**: Ensure payment dashboard connects to live transaction data

### Phase 3: Bilingual Experience Enhancement
- **Translation Audit**: Complete coverage audit for all components
- **RTL/LTR Polish**: Enhance right-to-left layout support and mobile optimization
- **Language Switcher**: Finalize mobile language switching with proper persistence
- **User Experience**: Test and validate seamless bilingual experience

### Phase 4: Real-Time Features Enhancement
- **Live Dashboard Updates**: Implement real-time dashboard metrics
- **Session Status Indicators**: Add live session status and participant tracking
- **Notification Delivery**: Enhance real-time notification system
- **Performance Optimization**: Optimize real-time features for scalability

## 10. Technical Constraints
- Must maintain existing Supabase-first architecture
- Preserve enterprise-grade security with RLS policies
- Maintain performance optimization and bundle analysis
- Ensure Hebrew RTL and English LTR support
- Mobile-first responsive design requirements
- Accessibility compliance (WCAG 2.1 AA)

## 11. Technology Stack
- **Frontend**: React 18 + TypeScript + Vite with performance optimization
- **Backend**: Supabase PostgreSQL + Express.js API layer
- **Real-time**: Supabase subscriptions with authentication filtering
- **Internationalization**: react-i18next with mobile Capacitor support
- **Mobile**: PWA + Capacitor for native capabilities
- **Testing**: Comprehensive E2E testing framework (187 tests)

## 12. Success Criteria
- Zero API connection errors (no ECONNREFUSED)
- 100% mock data replaced with live Supabase queries
- Seamless bilingual experience on all devices
- Real-time features functioning across all components
- All existing tests passing with live data integration
- Performance metrics maintained or improved

## 13. Priority Levels
1. **CRITICAL**: Backend recovery and API connectivity
2. **HIGH**: Mock data replacement with live Supabase integration
3. **MEDIUM**: Bilingual experience finalization
4. **LOW**: Real-time feature enhancements and optimization

## 14. Risk Mitigation
- Maintain backward compatibility during transitions
- Implement proper error handling and loading states
- Preserve existing authentication and security measures
- Ensure graceful degradation for network issues
- Maintain comprehensive test coverage throughout changes

## 15. 1. Overview
Our application currently relies on a traditional PostgreSQL database served through a Node.js/Prisma backend. We want to migrate fully to Supabase to leverage its hosted Postgres offering, built-in authentication, serverless functions, real-time capabilities, and especially Row-Level Security (RLS) to tighten data-access control. The migration must be seamless for end-users and maintain parity (or improvements) in performance, security, and developer experience.

## 16. 2. Goals
- Replace the self-hosted database & Prisma layer with Supabase Postgres.
- Implement Supabase Auth for user management while preserving existing user accounts.
- Configure comprehensive RLS policies for all tables to enforce least-privilege access.
- Migrate all data with zero permanent loss and minimal downtime (<5 min).
- Refactor backend APIs and client data-access code to use Supabase SDK instead of direct Prisma calls.
- Introduce real-time subscriptions where beneficial (e.g., chat, notifications).
- Update CI/CD, env variables, infrastructure, and documentation.
- Provide rollback strategy and observability during and after cut-over.

## 17. 3. Non-Goals
- Major UI redesigns (except needed API integration tweaks).
- Switching mobile push infrastructure—handled separately.
- Migrating analytics/BI pipelines.

## 18. 4. Assumptions
- All current production data resides in a single Postgres instance.
- Typescript codebase already modular; DI facilitates swapping data layer.
- Team has admin access to Supabase organization & billing.
- We target Supabase Postgres version ≥ 15 which supports RLS and PG-bouncer.

## 19. 5. Technical Requirements
### 5.1 Database & Data
- Design target schema in Supabase matching existing tables; leverage generated columns where useful.
- Create staging + production Supabase projects.
- Use `supabase db dump` / `pg_dump` with custom scripts for data transfer.
- Enable logical replication if needed for near-zero downtime cut-over.

### 5.2 Row-Level Security
- Globally enable RLS.
- Write explicit policies for CRUD operations per table.
- Cover multi-tenant isolation (users access only their tenant rows).
- Add unit tests to validate RLS behavior using `supabase-js` and `postgrest`.

### 5.3 Application Layer
- Replace Prisma with `@supabase/supabase-js` (client) and Supabase Server-Side Helpers.
- Implement Supabase Edge Functions where existing server endpoints map 1-to-1.
- Update backend auth middleware to verify Supabase JWT.
- Provide migration helpers for password hashing differences.

### 5.4 CI/CD & Infrastructure
- Store Supabase service role & anon keys in GitHub Actions Secrets / Vercel.
- Add Supabase CLI to CI for migrations.
- Update Terraform (if any) to manage Supabase config.

### 5.5 Monitoring & Observability
- Enable Supabase Logs & Dashboard alerts.
- Integrate with Datadog/NewRelic for DB metrics.

## 20. 6. User Stories & Acceptance Criteria
1. **As an existing user**, I can log in during migration without noticing downtime.
2. **As a developer**, I can create a new RLS policy and apply it via CI in <30 sec.
3. **As a user**, I cannot access data belonging to another tenant.
4. **As DevOps**, I can roll back to the old database within 10 min if issues arise.

Acceptance Criteria:
- All API integration tests pass using Supabase backend.
- RLS policy tests achieve 100 % coverage of critical tables.
- Data discrepancy between old and new DBs ≤ 0.01 %.
- Dashboard shows <100 ms p95 query latency post-migration.

## 21. 7. Migration Phases
1. **Preparation & Schema Alignment**
   - Audit current schema and ER-diagrams.
   - Draft Supabase schema SQL and review.
2. **Supabase Project Setup**
   - Create staging project; configure Auth, storage buckets.
3. **Data Migration POC**
   - Run initial dump & import into staging; verify integrity.
4. **RLS Policy Implementation**
   - Write policies; unit-test via pgTAP / sqlc.
5. **Code Refactor (Backend)**
   - Abstract data layer, integrate Supabase SDK, update endpoints.
6. **Code Refactor (Frontend/Web & Mobile)**
   - Replace fetchers/hooks to use Supabase client.
7. **Real-Time Features & Edge Functions**
   - Implement subscriptions, functions if applicable.
8. **End-to-End Testing & Load Testing**
   - Regression suites, performance benchmarks.
9. **Production Cut-over Plan**
   - Enable logical replication; switch read/write gradually.
10. **Post-Migration Cleanup & Monitoring**
    - Remove Prisma, deprecate old infra, refine alerts.

## 22. 8. Timeline (Estimate)
| Phase | Duration |
|-------|----------|
| Preparation           | 1 week |
| Supabase Setup        | 2 days |
| Data Migration POC    | 3 days |
| RLS Implementation    | 1.5 weeks |
| Code Refactor Backend | 2 weeks |
| Code Refactor Frontend| 1 week |
| Real-Time & Edge Fns  | 1 week |
| Testing & Hardening   | 1 week |
| Cut-over & Validation | 3 days |
| Cleanup               | 2 days |

## 23. 9. Risks & Mitigations
- **Performance Regression** → Run load tests; enable Supabase Index Advisor.
- **RLS Misconfiguration** → Implement thorough policy tests + security audit.
- **Migration Downtime** → Use logical replication, cut-over during low-traffic window.
- **Auth Token Conflicts** → Run dual-auth during transition, clear stale cookies.

## 24. 10. Success Metrics
- 0 critical incidents in first 30 days post-migration.
- <1 % user-reported auth/login failures.
- Query p95 latency maintained or improved vs. baseline.
- Developer on-boarding time to create a new table with RLS <10 min.

## 25. 11. Appendices
- **Existing ER Diagram** (link TBD)
- **Supabase CLI commands cheat-sheet**
- **Rollback Procedure Doc** 