# Task ID: 8
# Title: Epic 8: Technical Excellence & Debt Reduction
# Status: pending
# Dependencies: None
# Priority: high
# Description: Ensures the codebase is stable, maintainable, and secure for the future.
# Details:
Implement user stories 8.1 through 8.4. This involves enabling TypeScript strict mode, creating and executing a full database migration from Mongoose to Prisma, enhancing test coverage across the board, and finalizing the Capacitor native wrapper.

# Test Strategy:
Verify that `tsc --noEmit` passes with `strict: true`. Database migration validated with a suite of data integrity tests. Test coverage reports must meet a new, higher threshold. Native apps must build and run on simulators.

# Subtasks:
## 1. Database Schema Migration to Supabase [done]
### Dependencies: None
### Description: Migrate the current Prisma schema and MongoDB collections to Supabase PostgreSQL with proper table design, relationships, and constraints.
### Details:
1. Analyze current Prisma schema.prisma and MongoDB collections
2. Design unified Supabase PostgreSQL schema  
3. Create Supabase migration files
4. Set up proper indexes and constraints
5. Test schema integrity
6. Configure Row Level Security policies
7. Set up Storage buckets

## 2. Authentication Migration to Supabase Auth [done]
### Dependencies: 8.1
### Description: Replace Passport.js session-based authentication with Supabase Auth including email/password and social authentication.
### Details:
1. Configure Supabase Auth policies and providers
2. Remove Passport.js configuration
3. Update login/signup flows to use Supabase Auth
4. Implement session management with Supabase
5. Update authentication middleware  
6. Test authentication flows

## 3. Data Migration from MongoDB and Prisma [done]
### Dependencies: 8.1
### Description: Create migration scripts to transfer all existing data from MongoDB and current PostgreSQL to Supabase PostgreSQL.
### Details:
1. Analyze existing data sources (7 PostgreSQL tables + 15+ MongoDB collections)
2. Create migration script with comprehensive data mapping
3. Implement ID mapping utilities for ObjectId to UUID conversion
4. Add migration statistics and reporting system
5. Create sample data and validation functions
6. Implement error handling and rollback procedures

## 4. API Migration to Supabase [done]
### Dependencies: 8.1, 8.2, 8.3
### Description: Replace all Drizzle ORM and MongoDB/Mongoose calls in backend API routes with Supabase client queries while maintaining API compatibility.
### Details:
1. Replace Drizzle ORM calls with Supabase client queries
2. Replace MongoDB/Mongoose calls with Supabase client queries  
3. Update all API endpoints to use unified Supabase data access
4. Maintain API compatibility while switching data layer
5. Test all endpoints with new Supabase backend
6. Update error handling for Supabase responses

## 5. File Storage Migration to Supabase Storage [done]
### Dependencies: 8.1, 8.2, 8.4
### Description: Migrate from AWS S3/local file storage to Supabase Storage with proper bucket policies and access controls.
### Details:
1. Set up Supabase Storage buckets for different file types (profiles, resources, audio-notes, documents, session-files)
2. Implement file upload/download utilities using Supabase Storage
3. Migrate existing files from current storage to Supabase Storage
4. Update all file-related API endpoints to use Supabase Storage
5. Implement proper access policies and security rules
6. Test file operations with new storage system

## 6. Row Level Security Implementation [done]
### Dependencies: 8.1, 8.2
### Description: Implement comprehensive Row Level Security (RLS) policies for multi-tenant coach-client data isolation.
### Details:
1. Design RLS policies for all tables based on user roles (client, coach, admin)
2. Implement coach-client data isolation policies  
3. Create helper functions for policy enforcement
4. Test RLS policies with different user scenarios
5. Verify no data leakage between tenants
6. Document security model and policies

## 7. Real-time Features Implementation [done]
### Dependencies: 8.1, 8.2, 8.4
### Description: Implement real-time features using Supabase subscriptions for notifications, session updates, and live data.
### Details:
1. Set up Supabase real-time subscriptions for critical tables
2. Implement real-time notifications for session updates
3. Add live updates for coach-client interactions
4. Create real-time reflection and note updates
5. Test real-time functionality across different browsers
6. Optimize subscription performance and memory usage

## 8. React Frontend Integration [pending]
### Dependencies: 8.2, 8.4, 8.6
### Description: Update React frontend components to work directly with Supabase client instead of backend API calls.
### Details:
1. Update React components to use Supabase client directly
2. Replace API calls with Supabase queries where appropriate
3. Implement client-side data fetching and caching
4. Update state management for Supabase integration
5. Test all frontend functionality with new Supabase backend
6. Optimize performance and user experience

## 9. TypeScript Integration with Supabase [pending]
### Dependencies: 8.1, 8.4
### Description: Generate TypeScript types from Supabase schema and integrate them throughout the application.
### Details:
1. Generate TypeScript types from Supabase schema using supabase-js CLI
2. Update all components and API calls to use generated types
3. Implement type-safe database queries and mutations
4. Replace existing types with Supabase-generated types
5. Ensure type safety across frontend and backend
6. Update development workflow for automatic type generation

## 10. Update AuthContext to Use Supabase Auth [pending]
### Dependencies: None
### Description: Replace existing AuthContext implementation to use Supabase Auth directly instead of backend API calls.
### Details:
1. Update AuthContext to use Supabase auth.getUser() and auth.onAuthStateChange()
2. Replace login/logout/signup methods with Supabase auth methods
3. Update user session management with Supabase session handling
4. Ensure seamless integration with existing React components
5. Test authentication flows with new Supabase integration
6. Maintain backward compatibility with existing auth-dependent components

## 11. Create Supabase Data Hooks with React Query [pending]
### Dependencies: None
### Description: Create custom React hooks that use Supabase client with React Query for data fetching, caching, and synchronization.
### Details:
1. Create useSupabaseQuery hook that combines Supabase queries with React Query
2. Create useSupabaseMutation hook for data mutations with optimistic updates
3. Implement proper error handling and loading states
4. Add support for real-time subscriptions within React Query cache
5. Create specialized hooks for key entities (users, sessions, reflections, notes)
6. Test hooks with different data access patterns and edge cases

## 12. Migrate Dashboard and Analytics Components [pending]
### Dependencies: 8.10, 8.11
### Description: Update dashboard and analytics components to use Supabase client directly instead of backend API calls.
### Details:
1. Update AnalyticsDashboard.tsx to use Supabase queries for analytics data
2. Migrate AuditLogsDashboard.tsx to use Supabase client for audit logs
3. Update ClientEngagementChart.tsx and other chart components for direct data access
4. Implement real-time updates for dashboard metrics using existing real-time service
5. Update AdminDashboard.tsx and PlatformStats.tsx for admin analytics
6. Test dashboard performance and ensure data consistency

## 13. Migrate Session Management Components [pending]
### Dependencies: 8.10, 8.11
### Description: Update session-related components to use Supabase client for session data management and real-time updates.
### Details:
1. Update SessionModal.tsx to use Supabase client for session CRUD operations
2. Migrate booking components (BookingPage.tsx, BookingLinkGenerator.tsx) to Supabase
3. Update calendar integration components to use Supabase client
4. Implement real-time session updates using existing real-time infrastructure
5. Update availability management components for direct Supabase access
6. Test session scheduling and management workflows

## 14. Migrate Client Management and Notes Components [pending]
### Dependencies: 8.10, 8.11
### Description: Update client-related components, notes, and reflections to use Supabase client with real-time features.
### Details:
1. Update ClientsTable.tsx to use Supabase client for client data management
2. Migrate coach notes components to use Supabase client with real-time updates
3. Update reflection components (ReflectionForm.tsx, ReflectionTimeline.tsx) for Supabase
4. Implement real-time collaboration features for coach-client interactions
5. Update notification components to use Supabase real-time subscriptions
6. Test multi-user real-time scenarios and data synchronization

## 15. Migrate File Upload and Storage Components [pending]
### Dependencies: 8.10, 8.11
### Description: Update file upload, audio recording, and media components to use Supabase Storage directly.
### Details:
1. Update AudioPlayer.tsx and AudioRecorder.tsx to use Supabase Storage
2. Migrate file upload components to use Supabase Storage buckets
3. Update mobile audio components for Supabase Storage integration
4. Implement direct file upload with progress tracking using Supabase Storage
5. Update resource sharing components for Supabase Storage access
6. Test file operations, upload/download performance, and security policies

## 16. Update API Layer and Remove Legacy Backend Dependencies [pending]
### Dependencies: 8.12, 8.13, 8.14, 8.15
### Description: Phase out the API layer (client/src/lib/api.ts) and remove dependencies on backend endpoints where direct Supabase access is preferable.
### Details:
1. Identify components that can use Supabase client directly vs those that need backend APIs
2. Update client/src/lib/api.ts to only handle non-Supabase operations (if any)
3. Remove unused API endpoints and simplify authentication headers
4. Update service layer files to use Supabase client where appropriate
5. Implement graceful fallback patterns for hybrid API/Supabase access
6. Test end-to-end functionality and ensure no regressions

## 17. Comprehensive Testing and Performance Optimization [pending]
### Dependencies: 8.16
### Description: Conduct thorough testing of the new Supabase-integrated frontend and optimize performance for production use.
### Details:
1. Create comprehensive test suite for Supabase-integrated components
2. Test real-time features under various network conditions and user loads
3. Perform security testing to ensure RLS policies work correctly from frontend
4. Optimize query performance and implement proper caching strategies
5. Test mobile responsiveness and Capacitor app integration
6. Conduct user acceptance testing and gather performance metrics

## 18. Generate TypeScript Types from Supabase Schema [pending]
### Dependencies: None
### Description: Set up automatic generation of TypeScript types from the Supabase database schema.
### Details:
1. Install and configure Supabase CLI for type generation
2. Set up automated type generation scripts in package.json
3. Generate initial TypeScript types from current Supabase schema
4. Create shared types directory for generated Supabase types
5. Set up development workflow for automatic type regeneration
6. Document type generation process and best practices

## 19. Update Supabase Client Configuration with Generated Types [pending]
### Dependencies: 8.18
### Description: Update the Supabase client configuration to use generated TypeScript types for full type safety.
### Details:
1. Update client/src/lib/supabase.ts to use generated types
2. Configure Supabase client with proper TypeScript generics
3. Update createClient calls to include generated database types
4. Ensure type safety for all Supabase operations (queries, mutations, subscriptions)
5. Test type checking with various database operations
6. Update environment configuration for typed Supabase client

## 20. Update Frontend Components with Generated Types [pending]
### Dependencies: 8.19
### Description: Update all React components, hooks, and services to use the generated Supabase types for full type safety.
### Details:
1. Update all React components to use generated Supabase types
2. Update custom hooks (useSupabaseQuery, useSupabaseMutation) with proper typing
3. Update service files to use generated types for all database operations
4. Replace existing custom types with generated Supabase types where applicable
5. Fix TypeScript errors and ensure full type coverage
6. Update tests to use new typed interfaces

## 21. Update Backend API with Generated Types [pending]
### Dependencies: 8.19
### Description: Update the backend API layer to use generated Supabase types for consistent typing across the application.
### Details:
1. Update server/src/lib/supabase.ts to use generated types
2. Update all controllers to use generated Supabase types
3. Update middleware and route handlers with proper typing
4. Replace existing type definitions with generated types
5. Ensure compatibility between frontend and backend type usage
6. Test API endpoints with new type definitions

## 22. Update Shared Types and Clean Up Legacy Types [pending]
### Dependencies: 8.20, 8.21
### Description: Update the shared types directory and remove legacy type definitions that are now replaced by generated Supabase types.
### Details:
1. Update shared/types/ directory to use generated Supabase types
2. Remove duplicate or redundant type definitions
3. Create utility types and interfaces that extend generated types
4. Update type exports and imports throughout the application
5. Ensure consistent type usage across client, server, and shared directories
6. Document new type architecture and usage patterns

## 23. Final TypeScript Validation and Testing [pending]
### Dependencies: 8.22
### Description: Conduct comprehensive TypeScript validation and testing to ensure full type safety across the application.
### Details:
1. Run TypeScript compiler with strict mode to catch all type errors
2. Update tsconfig.json files for optimal type checking
3. Test all type-dependent functionality (queries, mutations, subscriptions)
4. Create comprehensive type tests for generated Supabase types
5. Validate type safety in development and build processes
6. Document final type architecture and developer guidelines

